package com.beautyparlour.controller;

import com.beautyparlour.dao.ServiceDAO;
import com.beautyparlour.model.Service;
import com.beautyparlour.util.DatabaseUtil;

import jakarta.servlet.ServletException;
import jakarta.servlet.annotation.WebServlet;
import jakarta.servlet.http.HttpServlet;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

import java.io.IOException;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.List;

@WebServlet(name = "ServiceServlet", urlPatterns = {"/admin/services/*"})
public class ServiceServlet extends HttpServlet {
    private static final long serialVersionUID = 1L;
    private ServiceDAO serviceDAO;

    @Override
    public void init() throws ServletException {
        super.init();
        try {
            Connection connection = DatabaseUtil.getConnection();
            serviceDAO = new ServiceDAO(connection);
        } catch (SQLException e) {
            throw new ServletException("Error initializing database connection", e);
        }
    }

    protected void doGet(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();

        switch (action) {
            case "/list":
                listServices(request, response);
                break;
            case "/add":
                showAddForm(request, response);
                break;
            case "/edit":
                showEditForm(request, response);
                break;
            case "/delete":
                deleteService(request, response);
                break;
            default:
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                break;
        }
    }

    protected void doPost(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String action = request.getPathInfo();

        switch (action) {
            case "/add":
                addService(request, response);
                break;
            case "/edit":
                updateService(request, response);
                break;
            default:
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                break;
        }
    }

    private void listServices(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        try {
            List<Service> services = serviceDAO.getAllServices();
            request.setAttribute("services", services);
            request.getRequestDispatcher("/admin/manageServices.jsp").forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("Error fetching services", e);
        }
    }

    private void showAddForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        // Forward to addService.jsp or any form page for adding services
        request.getRequestDispatcher("/admin/addService.jsp").forward(request, response);
    }

    private void addService(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        String serviceName = request.getParameter("serviceName");
        String description = request.getParameter("description");
        double price = Double.parseDouble(request.getParameter("price"));
        int expectedTime = Integer.parseInt(request.getParameter("expectedTime"));

        Service newService = new Service(serviceName, description, price, expectedTime);
        try {
            serviceDAO.addService(newService);
            response.sendRedirect(request.getContextPath() + "/admin/services/list");
        } catch (SQLException e) {
            throw new ServletException("Error adding service", e);
        }
    }

    private void showEditForm(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int serviceId = Integer.parseInt(request.getParameter("serviceId"));
        try {
            Service service = serviceDAO.getServiceById(serviceId);
            if (service == null) {
                response.sendError(HttpServletResponse.SC_NOT_FOUND);
                return;
            }
            request.setAttribute("service", service);
            request.getRequestDispatcher("/admin/editService.jsp").forward(request, response);
        } catch (SQLException e) {
            throw new ServletException("Error fetching service for editing", e);
        }
    }

    private void updateService(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int serviceId = Integer.parseInt(request.getParameter("serviceId"));
        String serviceName = request.getParameter("serviceName");
        String description = request.getParameter("description");
        double price = Double.parseDouble(request.getParameter("price"));
        int expectedTime = Integer.parseInt(request.getParameter("expectedTime"));

        Service updatedService = new Service(serviceId, serviceName, description, price, expectedTime);
        try {
            serviceDAO.updateService(updatedService);
            response.sendRedirect(request.getContextPath() + "/admin/services/list");
        } catch (SQLException e) {
            throw new ServletException("Error updating service", e);
        }
    }

    private void deleteService(HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        int serviceId = Integer.parseInt(request.getParameter("serviceId"));
        try {
            serviceDAO.deleteService(serviceId);
            response.sendRedirect(request.getContextPath() + "/admin/services/list");
        } catch (SQLException e) {
            throw new ServletException("Error deleting service", e);
        }
    }
}
